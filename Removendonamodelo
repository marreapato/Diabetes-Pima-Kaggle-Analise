# modelo ml
install.packages("naniar")
library(naniar)
library(tidyverse)
dado<-intencaocompra
dadov<-as.vector(dado$VisitorType)
dadov<-str_replace_all(dadov,"Other","NA")
dadov
dadov<-dadov %>% na_if("NA")
dado<-cbind(dado,dadov)
dado<-as.tibble(dado)
dado<-dado[,-7]

table(is.na(dado$dadov))

table(dado$dadov)
#transformado em NA
#fatores
dado$dadov<-as.factor(dado$dadov)
dado$Revenue<-as.factor(dado$Revenue)
dado$Weekend<-as.factor(dado$Weekend)

str(dado)


# Pacote 'caret'
#install.packages("caret")
library(caret)

dados<-dado
dados<-na.exclude(dados)
#problema dos NA

# Dividindo em teste e treinamento
indice = createDataPartition(y = dados[['Revenue']], p = 0.75, list = FALSE)
treino = dados[ indice, ]
teste  = dados[-indice, ] 

# Controle do Treinamento
controle <- trainControl(method = "repeatedcv", number = 10, repeats = 3) 

# Ajuste do modelo REG LOG
modelLookup(model = 'glm')
rl = train(factor(Revenue) ~., data = treino, method = 'glm',
           trControl = controle, tuneLength = 10 )
predicao = predict(rl, newdata = teste)
cm = confusionMatrix(predicao, factor(teste[['Revenue']]) )
cm




# KNN

knn = train(factor(Revenue) ~ ., data = treino, method = 'knn',
            trControl = controle, tuneLength = 10 )
knn

predicao = predict(knn, newdata = teste)
cm = confusionMatrix(predicao, factor(teste[['Revenue']]) )
cm

# LDA

lda = train(factor(Revenue) ~ ., data = treino, method = 'knn',
            trControl = controle, tuneLength = 10 )
lda

predicao = predict(lda, newdata = teste)
cm = confusionMatrix(predicao, factor(teste[['Revenue']]) )
cm

# QDA

qda = train(factor(Revenue) ~., data = treino, method = 'knn',
            trControl = controle, tuneLength = 10 )
qda

predicao = predict(qda, newdata = teste)
cm = confusionMatrix(predicao, factor(teste[['Revenue']]) )
cm

# Ajuste do modelo Arvore de Decisao
modelLookup(model = 'rpart')

modelo <- train(factor(Revenue) ~., 
                data = treino, method = 'rpart',
                trControl = controle, tuneLength = 10 )
modelo$finalModel

predicao = predict(modelo, newdata = teste)
cm = confusionMatrix(predicao, factor(teste[['Revenue']]) )
cm

install.packages('rattle')
library(rattle)
fancyRpartPlot(modelo$finalModel, type = 4)












